// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	microbatcher "github.com/allanjoh/microbatcher/pkg/microbatcher"
	mock "github.com/stretchr/testify/mock"
)

// BatchProcessor is an autogenerated mock type for the BatchProcessor type
type BatchProcessor struct {
	mock.Mock
}

// ProcessBatch provides a mock function with given fields: jobs
func (_m *BatchProcessor) ProcessBatch(jobs []microbatcher.Job) []microbatcher.JobResult {
	ret := _m.Called(jobs)

	var r0 []microbatcher.JobResult
	if rf, ok := ret.Get(0).(func([]microbatcher.Job) []microbatcher.JobResult); ok {
		r0 = rf(jobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]microbatcher.JobResult)
		}
	}

	return r0
}

type mockConstructorTestingTNewBatchProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchProcessor creates a new instance of BatchProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchProcessor(t mockConstructorTestingTNewBatchProcessor) *BatchProcessor {
	mock := &BatchProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
